// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GameProtocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlayerInput struct {
	_tab flatbuffers.Table
}

func GetRootAsPlayerInput(buf []byte, offset flatbuffers.UOffsetT) *PlayerInput {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlayerInput{}
	x.Init(buf, n+offset)
	return x
}

func FinishPlayerInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsPlayerInput(buf []byte, offset flatbuffers.UOffsetT) *PlayerInput {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlayerInput{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedPlayerInputBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *PlayerInput) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlayerInput) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlayerInput) Frame() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PlayerInput) MutateFrame(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *PlayerInput) CommandType() PlayerCommandType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return PlayerCommandType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *PlayerInput) MutateCommandType(n PlayerCommandType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func PlayerInputStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func PlayerInputAddFrame(builder *flatbuffers.Builder, frame int32) {
	builder.PrependInt32Slot(0, frame, 0)
}
func PlayerInputAddCommandType(builder *flatbuffers.Builder, commandType PlayerCommandType) {
	builder.PrependInt8Slot(1, int8(commandType), 0)
}
func PlayerInputEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
