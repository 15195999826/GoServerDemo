// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package GameProtocol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Vector2 struct {
	_tab flatbuffers.Table
}

func GetRootAsVector2(buf []byte, offset flatbuffers.UOffsetT) *Vector2 {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Vector2{}
	x.Init(buf, n+offset)
	return x
}

func FinishVector2Buffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsVector2(buf []byte, offset flatbuffers.UOffsetT) *Vector2 {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Vector2{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedVector2Buffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *Vector2) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Vector2) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Vector2) X() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Vector2) MutateX(n float32) bool {
	return rcv._tab.MutateFloat32Slot(4, n)
}

func (rcv *Vector2) Y() float32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetFloat32(o + rcv._tab.Pos)
	}
	return 0.0
}

func (rcv *Vector2) MutateY(n float32) bool {
	return rcv._tab.MutateFloat32Slot(6, n)
}

func Vector2Start(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func Vector2AddX(builder *flatbuffers.Builder, x float32) {
	builder.PrependFloat32Slot(0, x, 0.0)
}
func Vector2AddY(builder *flatbuffers.Builder, y float32) {
	builder.PrependFloat32Slot(1, y, 0.0)
}
func Vector2End(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
